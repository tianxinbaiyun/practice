// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: helloworld/helloworld.proto

package pb_helloworld

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HelloworldService service

type HelloworldService interface {
	SayHello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloRsp, error)
	SayName(ctx context.Context, in *NameReq, opts ...client.CallOption) (*NameRsp, error)
}

type helloworldService struct {
	c    client.Client
	name string
}

func NewHelloworldService(name string, c client.Client) HelloworldService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb.helloworld"
	}
	return &helloworldService{
		c:    c,
		name: name,
	}
}

func (c *helloworldService) SayHello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloRsp, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.SayHello", in)
	out := new(HelloRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) SayName(ctx context.Context, in *NameReq, opts ...client.CallOption) (*NameRsp, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.SayName", in)
	out := new(NameRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloworldService service

type HelloworldServiceHandler interface {
	SayHello(context.Context, *HelloReq, *HelloRsp) error
	SayName(context.Context, *NameReq, *NameRsp) error
}

func RegisterHelloworldServiceHandler(s server.Server, hdlr HelloworldServiceHandler, opts ...server.HandlerOption) error {
	type helloworldService interface {
		SayHello(ctx context.Context, in *HelloReq, out *HelloRsp) error
		SayName(ctx context.Context, in *NameReq, out *NameRsp) error
	}
	type HelloworldService struct {
		helloworldService
	}
	h := &helloworldServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloworldService{h}, opts...))
}

type helloworldServiceHandler struct {
	HelloworldServiceHandler
}

func (h *helloworldServiceHandler) SayHello(ctx context.Context, in *HelloReq, out *HelloRsp) error {
	return h.HelloworldServiceHandler.SayHello(ctx, in, out)
}

func (h *helloworldServiceHandler) SayName(ctx context.Context, in *NameReq, out *NameRsp) error {
	return h.HelloworldServiceHandler.SayName(ctx, in, out)
}
