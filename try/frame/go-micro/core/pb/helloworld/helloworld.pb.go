// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld/helloworld.proto

package pb_helloworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//客户端发送给服务端
type HelloReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73149fedf49f4319, []int{0}
}

func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReq.Unmarshal(m, b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return xxx_messageInfo_HelloReq.Size(m)
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

func (m *HelloReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//服务端返回给客户端
type HelloRsp struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRsp) Reset()         { *m = HelloRsp{} }
func (m *HelloRsp) String() string { return proto.CompactTextString(m) }
func (*HelloRsp) ProtoMessage()    {}
func (*HelloRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73149fedf49f4319, []int{1}
}

func (m *HelloRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRsp.Unmarshal(m, b)
}
func (m *HelloRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRsp.Marshal(b, m, deterministic)
}
func (m *HelloRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRsp.Merge(m, src)
}
func (m *HelloRsp) XXX_Size() int {
	return xxx_messageInfo_HelloRsp.Size(m)
}
func (m *HelloRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRsp proto.InternalMessageInfo

func (m *HelloRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//客户端发送给服务端
type NameReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameReq) Reset()         { *m = NameReq{} }
func (m *NameReq) String() string { return proto.CompactTextString(m) }
func (*NameReq) ProtoMessage()    {}
func (*NameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73149fedf49f4319, []int{2}
}

func (m *NameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameReq.Unmarshal(m, b)
}
func (m *NameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameReq.Marshal(b, m, deterministic)
}
func (m *NameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameReq.Merge(m, src)
}
func (m *NameReq) XXX_Size() int {
	return xxx_messageInfo_NameReq.Size(m)
}
func (m *NameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NameReq.DiscardUnknown(m)
}

var xxx_messageInfo_NameReq proto.InternalMessageInfo

func (m *NameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//服务端返回给客户端
type NameRsp struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRsp) Reset()         { *m = NameRsp{} }
func (m *NameRsp) String() string { return proto.CompactTextString(m) }
func (*NameRsp) ProtoMessage()    {}
func (*NameRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73149fedf49f4319, []int{3}
}

func (m *NameRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRsp.Unmarshal(m, b)
}
func (m *NameRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRsp.Marshal(b, m, deterministic)
}
func (m *NameRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRsp.Merge(m, src)
}
func (m *NameRsp) XXX_Size() int {
	return xxx_messageInfo_NameRsp.Size(m)
}
func (m *NameRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NameRsp proto.InternalMessageInfo

func (m *NameRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "pb.helloworld.HelloReq")
	proto.RegisterType((*HelloRsp)(nil), "pb.helloworld.HelloRsp")
	proto.RegisterType((*NameReq)(nil), "pb.helloworld.NameReq")
	proto.RegisterType((*NameRsp)(nil), "pb.helloworld.NameRsp")
}

func init() { proto.RegisterFile("helloworld/helloworld.proto", fileDescriptor_73149fedf49f4319) }

var fileDescriptor_73149fedf49f4319 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x47, 0x30, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0x78, 0x0b, 0x92, 0xf4, 0x10, 0x82, 0x4a, 0x72, 0x5c, 0x1c, 0x1e, 0x20, 0x5e, 0x50, 0x6a, 0xa1,
	0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98,
	0xad, 0x24, 0x03, 0x93, 0x2f, 0x2e, 0x10, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x87, 0x4a, 0x83,
	0x98, 0x4a, 0xb2, 0x5c, 0xec, 0x7e, 0x89, 0xb9, 0xa9, 0xb8, 0x34, 0x4b, 0x43, 0xa5, 0xb1, 0xe9,
	0x35, 0x9a, 0xc0, 0xc8, 0x25, 0xe8, 0x01, 0x77, 0x48, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa,
	0x90, 0x1d, 0x17, 0x47, 0x70, 0x62, 0x25, 0x58, 0x5c, 0x48, 0x5c, 0x0f, 0xc5, 0xad, 0x7a, 0x30,
	0x87, 0x4a, 0x61, 0x97, 0x28, 0x2e, 0x50, 0x62, 0x10, 0xb2, 0xe6, 0x62, 0x0f, 0x4e, 0xac, 0x04,
	0xd9, 0x2a, 0x24, 0x86, 0xa6, 0x0a, 0xea, 0x52, 0x29, 0xac, 0xe2, 0x20, 0xcd, 0x49, 0x6c, 0xe0,
	0x20, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x50, 0xbf, 0x46, 0x41, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloworldServiceClient is the client API for HelloworldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloworldServiceClient interface {
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
	SayName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error)
}

type helloworldServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloworldServiceClient(cc *grpc.ClientConn) HelloworldServiceClient {
	return &helloworldServiceClient{cc}
}

func (c *helloworldServiceClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := c.cc.Invoke(ctx, "/pb.helloworld.HelloworldService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) SayName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error) {
	out := new(NameRsp)
	err := c.cc.Invoke(ctx, "/pb.helloworld.HelloworldService/SayName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloworldServiceServer is the server API for HelloworldService service.
type HelloworldServiceServer interface {
	SayHello(context.Context, *HelloReq) (*HelloRsp, error)
	SayName(context.Context, *NameReq) (*NameRsp, error)
}

// UnimplementedHelloworldServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloworldServiceServer struct {
}

func (*UnimplementedHelloworldServiceServer) SayHello(ctx context.Context, req *HelloReq) (*HelloRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedHelloworldServiceServer) SayName(ctx context.Context, req *NameReq) (*NameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayName not implemented")
}

func RegisterHelloworldServiceServer(s *grpc.Server, srv HelloworldServiceServer) {
	s.RegisterService(&_HelloworldService_serviceDesc, srv)
}

func _HelloworldService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.helloworld.HelloworldService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_SayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).SayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.helloworld.HelloworldService/SayName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).SayName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloworldService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.helloworld.HelloworldService",
	HandlerType: (*HelloworldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloworldService_SayHello_Handler,
		},
		{
			MethodName: "SayName",
			Handler:    _HelloworldService_SayName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
